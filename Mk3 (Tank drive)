    #include <PS2X_lib.h>  

//Movement motors
    int Switch_1A = 5;//Right Forward
    int Switch_2A = 4; //Right backward
    int Switch_3B = 3;//Left Backward
    int Switch_4B = 2;//Left Forward
//Radio
    PS2X ps2x;
    int error;
    byte type = 0;
    byte vibrate = 0;


//individual movement
    void RightForward(){
        digitalWrite(Switch_2A,HIGH);
        digitalWrite(Switch_1A,LOW);
    }
    void RightBackward(){
        digitalWrite(Switch_1A,HIGH);
        digitalWrite(Switch_2A,LOW);
    }
    void RightStop(){
        digitalWrite(Switch_1A,LOW);
        digitalWrite(Switch_2A,LOW);
    }
    void LeftForward(){
        digitalWrite(Switch_4B,HIGH);
        digitalWrite(Switch_3B,LOW);
    }
    void LeftBackward(){
        digitalWrite(Switch_3B,HIGH);
        digitalWrite(Switch_4B,LOW);
    }
    void LeftStop(){
        digitalWrite(Switch_4B,LOW);
        digitalWrite(Switch_3B,LOW);
    }




//Combine movement
    void Stop(){
      LeftStop();
      RightStop();
    }

    void Forward(){
      LeftForward();
      RightForward();
      }  
    void Backward(){
      RightBackward();
      LeftBackward();
      }
    void Clockwise(){
      RightBackward();
      LeftForward();
      }
    void Counter_Clockwise(){
      RightForward();
      LeftBackward();
      }


    void setup() {
    do{
      error = ps2x.config_gamepad(9,7,8,6, true, true);   //GamePad(clock, command, attention, data, Pressures?, Rumble?)
      if(error == 0){
        Serial.println("Found Controller, configured successful");
        Serial.println("Try out all the buttons, X will vibrate the controller, faster as you press harder;");
        Serial.println("holding L1 or R1 will print out the analog stick values.");
        Serial.println("Go to www.billporter.info for updates and to report bugs.");
        }
      else if(error == 1){
        Serial.println("No controller found, check wiring, see readme.txt to enable debug. visit www.billporter.info for troubleshooting tips");
        }
      else if(error == 2){
        Serial.println("Controller found but not accepting commands. see readme.txt to enable debug. Visit www.billporter.info for troubleshooting tips");
        }
      else if(error == 3){
        Serial.println("Controller refusing to enter Pressures mode, may not support it. ");
        }
      type = ps2x.readType();
        switch(type) {
          case 0:
          Serial.println("Unknown Controller type");
          break;
          case 1:
          Serial.println("DualShock Controller Found");
          break;
          case 2:
          Serial.println("GuitarHero Controller Found");
          break;
          }
      }while(error>0);
    }


    void loop() {


    if(error == 1) 
    return; 
    if(type == 2){ 
      ps2x.read_gamepad();          //read controller 
      if(ps2x.ButtonPressed(GREEN_FRET))
        Serial.println("Green Fret Pressed");
      if(ps2x.ButtonPressed(RED_FRET))
        Serial.println("Red Fret Pressed");
      if(ps2x.ButtonPressed(YELLOW_FRET))
        Serial.println("Yellow Fret Pressed");
      if(ps2x.ButtonPressed(BLUE_FRET))
        Serial.println("Blue Fret Pressed");
      if(ps2x.ButtonPressed(ORANGE_FRET))
        Serial.println("Orange Fret Pressed");
      if(ps2x.ButtonPressed(STAR_POWER))
        Serial.println("Star Power Command");
      if(ps2x.Button(UP_STRUM))          //will be TRUE as long as button is pressed
        Serial.println("Up Strum");
      if(ps2x.Button(DOWN_STRUM))
        Serial.println("DOWN Strum");
      if(ps2x.Button(PSB_START))                   //will be TRUE as long as button is pressed
            Serial.println("Start is being held");
      if(ps2x.Button(PSB_SELECT))
            Serial.println("Select is being held");
      if(ps2x.Button(ORANGE_FRET)) // print stick value IF TRUE
      {
          Serial.print("Wammy Bar Position:");
          Serial.println(ps2x.Analog(WHAMMY_BAR), DEC); 
      } 
    }
    else { //DualShock Controller
      //get raw data from Joysticks
      int Rightspeed = ps2x.Analog(PSS_RY);
      int Leftspeed = ps2x.Analog(PSS_LY);
      //convert Joystick data to analog values
      Rightspeed=map(Rightspeed,0,255, 1023,-1023);
      Leftspeed=map(Leftspeed,0,255, 1023,-1023);

      ps2x.read_gamepad(false, vibrate);          //read controller and set large motor to spin at 'vibrate' speed
      if(ps2x.Button(PSB_START))                   //will be TRUE as long as button is pressed
            Serial.println("Start is being held");
      if(ps2x.Button(PSB_SELECT))
            Serial.println("Select is being held");
        if(ps2x.Button(PSB_PAD_UP)) {         //will be TRUE as long as button is pressed
          Serial.print("Up held this hard: ");
          Serial.println(ps2x.Analog(PSAB_PAD_UP), DEC);
        //  Forward();
        }
        if(ps2x.Button(PSB_PAD_RIGHT)){
          Serial.print("Right held this hard: ");
          Serial.println(ps2x.Analog(PSAB_PAD_RIGHT), DEC);
       //   Clockwise();
        }
        if(ps2x.Button(PSB_PAD_LEFT)){
          Serial.print("LEFT held this hard: ");
          Serial.println(ps2x.Analog(PSAB_PAD_LEFT), DEC);
         // Counter_Clockwise();
        }
        if(ps2x.Button(PSB_PAD_DOWN)){
        Serial.print("DOWN held this hard: ");
        Serial.println(ps2x.Analog(PSAB_PAD_DOWN), DEC);
        //Backward();
        }   
        vibrate = ps2x.Analog(PSAB_BLUE);        //this will set the large motor vibrate speed based on 
                                                //how hard you press the blue (X) button    
      if (ps2x.NewButtonState())               //will be TRUE if any button changes state (on to off, or off to on)
      {   
          if(ps2x.Button(PSB_L3))
            Serial.println("L3 pressed");
          if(ps2x.Button(PSB_R3))
            Serial.println("R3 pressed");
          if(ps2x.Button(PSB_L2))
            Serial.println("L2 pressed");
          if(ps2x.Button(PSB_R2))
            Serial.println("R2 pressed");
          if(ps2x.Button(PSB_GREEN))
            Serial.println("Triangle pressed");
      }   
      if(ps2x.ButtonPressed(PSB_RED))             //will be TRUE if button was JUST pressed
            Serial.println("Circle just pressed");
      if(ps2x.ButtonReleased(PSB_PINK))             //will be TRUE if button was JUST released
            Serial.println("Square just released");     
      if(ps2x.NewButtonState(PSB_BLUE))            //will be TRUE if button was JUST pressed OR released
            Serial.println("X just changed");    
      if(ps2x.Button(PSB_L1) || ps2x.Button(PSB_R1)) // print stick values if either is TRUE
      {
          Serial.print("Stick Values:");
          Serial.print(ps2x.Analog(PSS_LY), DEC); //Left stick, Y axis. Other options: LX, RY, RX  
          Serial.print(",");
          Serial.print(ps2x.Analog(PSS_LX), DEC); 
          Serial.print(",");
          Serial.print(ps2x.Analog(PSS_RY), DEC); 
          Serial.print(",");
          Serial.println(ps2x.Analog(PSS_RX), DEC); 
      } 
      /*if (!ps2x.Button(PSB_PAD_DOWN) && !ps2x.Button(PSB_PAD_UP) && !ps2x.Button(PSB_PAD_RIGHT) && !ps2x.Button(PSB_PAD_LEFT)) {
        Stop();
      }*/
      if(Rightspeed>50){ //Right Forward
        digitalWrite(Switch_2A,HIGH);
        digitalWrite(Switch_1A,LOW);
      }
      if(Rightspeed<50){ //Right Backward
        digitalWrite(Switch_1A,HIGH);
        digitalWrite(Switch_2A,LOW);
      }
      if(Leftspeed>50){ //Left Forward
        digitalWrite(Switch_4B,HIGH);
        digitalWrite(Switch_3B,LOW);

      }
      if(Leftspeed<50){  //Left Backward
        digitalWrite(Switch_3B,HIGH);
        digitalWrite(Switch_4B,LOW);
      }
      if(abs(Rightspeed)<50){ //Right stick deadzone
        digitalWrite(Switch_2A, LOW);
        digitalWrite(Switch_1A, LOW);

      }
      if(abs(Leftspeed)<50){ //Left stick deadzone
        digitalWrite(Switch_3B, LOW);
        digitalWrite(Switch_4B, LOW);
      }
    }
    delay(50);
    }
